#import database and get group address handle (group provisioned with address 0xC001)
import restoring_commands
db = MeshDB("database/example_database.json")
db.load()
restoring_commands.database_restore(db, device)
restoring_commands.provisioned_device_data_restore(db, device)

device.send(cmd.AddrPublicationAdd(address=0xC001))

#Light each subnet
gc_Group = GenericOnOffClient()
device.model_add(gc_Group)
gc_Group.publish_set(0, 30)
gc_Group.force_segmented = True
gc_Group.set(True)

gc_Group.set(False)
gc_Group.publish_set(1, 30)
gc_Group.set(True)
gc_Group.set(False)

#Switch node 3.0 to subnet 1
cc = ConfigurationClient(db)
device.model_add(cc)
cc.publish_set(10, 2)
cc.model_app_unbind(db.nodes[2].unicast_address, 0, mt.ModelId(0x1000))
cc.model_app_bind(db.nodes[2].unicast_address, 1, mt.ModelId(0x1000))

#Light subnet 1 with new addition
gc_Group.publish_set(1, 30)
gc_Group.set(True)
gc_Group.set(False)

#Light subnet 0
gc_Group.publish_set(0, 30)
gc_Group.set(True)
gc_Group.set(False)

#Switch node 3.0 back to subnet 0
cc.publish_set(10, 2)
cc.model_app_unbind(db.nodes[2].unicast_address, 1, mt.ModelId(0x1000))
cc.model_app_bind(db.nodes[2].unicast_address, 0, mt.ModelId(0x1000))

#Light subnet 1 as original
gc_Group.publish_set(1, 30)
gc_Group.set(True)
gc_Group.set(False)

#Light subnet 0
gc_Group.publish_set(0, 30)
gc_Group.set(True)
gc_Group.set(False)

#Show individual access.
device.send(cmd.AddrPublicationAdd(db.nodes[8].unicast_address))
gc_Uni = GenericOnOffClient()
device.model_add(gc_Uni)
gc_Uni.force_segmented = True
gc_Uni.publish_set(1,8) #first is appkey, second is from AddrPublicationAdd()
gc_Uni.set(True)

